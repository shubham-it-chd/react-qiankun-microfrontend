import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import Select from "react-select";
import { useState } from "react";

// Define Zod schema for form validation
const formSchema = z.object({
  firm: z.object({
    value: z.string().min(1, "Firm is required"),
    label: z.string().min(1, "Firm label is required"),
  }, { required_error: "Please select a firm" }),
  fund: z.object({
    value: z.string().min(1, "Fund is required"),
    label: z.string().min(1, "Fund label is required"),
  }, { required_error: "Please select a fund" }),
  linkUrl: z.string().url("Invalid URL format").min(1, "URL is required"),
  linkType: z.object({
    value: z.string().min(1, "Link type is required"),
    label: z.string().min(1, "Link type label is required"),
  }, { required_error: "Please select a link type" }),
});

// Mock data for dropdowns (replace with actual data from your API)
const firmOptions = [
  { value: "firm1", label: "Firm A" },
  { value: "firm2", label: "Firm B" },
];

const fundOptions = [
  { value: "fund1", label: "Fund X" },
  { value: "fund2", label: "Fund Y" },
];

const linkTypeOptions = [
  { value: "website", label: "Website" },
  { value: "document", label: "Document" },
  { value: "social", label: "Social Media" },
];

// Component for rendering error messages
const ErrorMessage = ({ message }) => (
  <p className="text-red-500 text-sm mt-1">{message}</p>
);

const AddLinkModal = ({ firmId, fundId, onClose }) => {
  // Initialize useForm with Zod resolver
  const { 
    register, 
    handleSubmit, 
    formState: { errors, isSubmitting }, 
    setValue,
    reset 
  } = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firm: null,
      fund: null,
      linkUrl: "",
      linkType: null,
    },
  });

  // State for submission status
  const [submitStatus, setSubmitStatus] = useState(null);

  // Form submission handler
  const onSubmit = async (data) => {
    try {
      // Prepare data with firmId and fundId
      const submissionData = {
        firmId,
        fundId,
        firm: data.firm,
        fund: data.fund,
        linkUrl: data.linkUrl,
        linkType: data.linkType,
      };

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));
      console.log("Form submitted successfully:", submissionData);
      setSubmitStatus("success");
      reset();
      
      // Reset status and close modal after 3 seconds
      setTimeout(() => {
        setSubmitStatus(null);
        onClose();
      }, 3000);
    } catch (error) {
      console.error("Submission error:", error);
      setSubmitStatus("error");
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">Add Link</h2>
        
        {submitStatus === "success" && (
          <div className="mb-4 p-3 bg-green-100 text-green-700 rounded">
            Link added successfully!
          </div>
        )}
        {submitStatus === "error" && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
            An error occurred. Please try again.
          </div>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          {/* Firm Field */}
          <div>
            <label htmlFor="firm" className="block text-sm font-medium text-gray-700">
              Firm
            </label>
            <Select
              id="firm"
              options={firmOptions}
              onChange={(option) => setValue("firm", option, { shouldValidate: true })}
              className="mt-1"
              placeholder="Select a firm"
            />
            {errors.firm && <ErrorMessage message={errors.firm.message} />}
          </div>

          {/* Fund Field */}
          <div>
            <label htmlFor="fund" className="block text-sm font-medium text-gray-700">
              Fund
            </label>
            <Select
              id="fund"
              options={fundOptions}
              onChange={(option) => setValue("fund", option, { shouldValidate: true })}
              className="mt-1"
              placeholder="Select a fund"
            />
            {errors.fund && <ErrorMessage message={errors.fund.message} />}
          </div>

          {/* Link URL Field */}
          <div>
            <label htmlFor="linkUrl" className="block text-sm font-medium text-gray-700">
              Link URL
            </label>
            <input
              id="linkUrl"
              type="text"
              {...register("linkUrl")}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50"
              placeholder="Enter link URL"
            />
            {errors.linkUrl && <ErrorMessage message={errors.linkUrl.message} />}
          </div>

          {/* Link Type Field */}
          <div>
            <label htmlFor="linkType" className="block text-sm font-medium text-gray-700">
              Link Type
            </label>
            <Select
              id="linkType"
              options={linkTypeOptions}
              onChange={(option) => setValue("linkType", option, { shouldValidate: true })}
              className="mt-1"
              placeholder="Select link type"
            />
            {errors.linkType && <ErrorMessage message={errors.linkType.message} />}
          </div>

          {/* Submit and Cancel Buttons */}
          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="py-2 px-4 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="py-2 px-4 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-blue-300 transition-colors"
            >
              {isSubmitting ? "Submitting..." : "Add Link"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddLinkModal;